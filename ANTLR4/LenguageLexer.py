# Generated from Lenguage.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,135,8,10,1,11,1,
        11,5,11,139,8,11,10,11,12,11,142,9,11,1,12,1,12,1,12,1,13,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
        25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
        30,1,31,1,31,5,31,191,8,31,10,31,12,31,194,9,31,1,32,3,32,197,8,
        32,1,32,4,32,200,8,32,11,32,12,32,201,1,33,1,33,1,33,4,33,207,8,
        33,11,33,12,33,208,1,34,1,34,1,34,1,34,5,34,215,8,34,10,34,12,34,
        218,9,34,1,34,1,34,1,35,4,35,223,8,35,11,35,12,35,224,1,35,1,35,
        0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,1,0,7,1,0,65,90,4,0,48,57,65,90,95,95,97,122,2,0,65,
        90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,2,0,34,34,92,92,3,0,9,
        10,13,13,32,32,245,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,77,1,0,0,0,5,81,1,0,0,
        0,7,87,1,0,0,0,9,94,1,0,0,0,11,96,1,0,0,0,13,98,1,0,0,0,15,100,1,
        0,0,0,17,102,1,0,0,0,19,105,1,0,0,0,21,134,1,0,0,0,23,136,1,0,0,
        0,25,143,1,0,0,0,27,146,1,0,0,0,29,149,1,0,0,0,31,152,1,0,0,0,33,
        155,1,0,0,0,35,157,1,0,0,0,37,159,1,0,0,0,39,161,1,0,0,0,41,163,
        1,0,0,0,43,165,1,0,0,0,45,167,1,0,0,0,47,169,1,0,0,0,49,171,1,0,
        0,0,51,173,1,0,0,0,53,175,1,0,0,0,55,178,1,0,0,0,57,180,1,0,0,0,
        59,182,1,0,0,0,61,185,1,0,0,0,63,188,1,0,0,0,65,196,1,0,0,0,67,203,
        1,0,0,0,69,210,1,0,0,0,71,222,1,0,0,0,73,74,5,60,0,0,74,75,5,105,
        0,0,75,76,5,62,0,0,76,2,1,0,0,0,77,78,5,60,0,0,78,79,5,111,0,0,79,
        80,5,62,0,0,80,4,1,0,0,0,81,82,5,119,0,0,82,83,5,104,0,0,83,84,5,
        105,0,0,84,85,5,108,0,0,85,86,5,101,0,0,86,6,1,0,0,0,87,88,5,116,
        0,0,88,89,5,97,0,0,89,90,5,99,0,0,90,91,5,116,0,0,91,92,5,105,0,
        0,92,93,5,99,0,0,93,8,1,0,0,0,94,95,5,44,0,0,95,10,1,0,0,0,96,97,
        5,123,0,0,97,12,1,0,0,0,98,99,5,125,0,0,99,14,1,0,0,0,100,101,5,
        35,0,0,101,16,1,0,0,0,102,103,5,105,0,0,103,104,5,102,0,0,104,18,
        1,0,0,0,105,106,5,101,0,0,106,107,5,108,0,0,107,108,5,115,0,0,108,
        109,5,101,0,0,109,20,1,0,0,0,110,111,5,76,0,0,111,135,5,68,0,0,112,
        113,5,67,0,0,113,135,5,68,0,0,114,115,5,67,0,0,115,135,5,73,0,0,
        116,117,5,76,0,0,117,135,5,73,0,0,118,119,5,77,0,0,119,120,5,67,
        0,0,120,135,5,73,0,0,121,122,5,77,0,0,122,123,5,67,0,0,123,135,5,
        68,0,0,124,125,5,77,0,0,125,135,5,79,0,0,126,127,5,69,0,0,127,135,
        5,68,0,0,128,129,5,68,0,0,129,135,5,67,0,0,130,131,5,69,0,0,131,
        135,5,73,0,0,132,133,5,80,0,0,133,135,5,79,0,0,134,110,1,0,0,0,134,
        112,1,0,0,0,134,114,1,0,0,0,134,116,1,0,0,0,134,118,1,0,0,0,134,
        121,1,0,0,0,134,124,1,0,0,0,134,126,1,0,0,0,134,128,1,0,0,0,134,
        130,1,0,0,0,134,132,1,0,0,0,135,22,1,0,0,0,136,140,7,0,0,0,137,139,
        7,1,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,
        1,0,0,0,141,24,1,0,0,0,142,140,1,0,0,0,143,144,5,58,0,0,144,145,
        5,58,0,0,145,26,1,0,0,0,146,147,5,60,0,0,147,148,5,45,0,0,148,28,
        1,0,0,0,149,150,5,60,0,0,150,151,5,60,0,0,151,30,1,0,0,0,152,153,
        5,62,0,0,153,154,5,62,0,0,154,32,1,0,0,0,155,156,5,40,0,0,156,34,
        1,0,0,0,157,158,5,41,0,0,158,36,1,0,0,0,159,160,5,91,0,0,160,38,
        1,0,0,0,161,162,5,93,0,0,162,40,1,0,0,0,163,164,5,43,0,0,164,42,
        1,0,0,0,165,166,5,45,0,0,166,44,1,0,0,0,167,168,5,42,0,0,168,46,
        1,0,0,0,169,170,5,47,0,0,170,48,1,0,0,0,171,172,5,37,0,0,172,50,
        1,0,0,0,173,174,5,61,0,0,174,52,1,0,0,0,175,176,5,47,0,0,176,177,
        5,61,0,0,177,54,1,0,0,0,178,179,5,62,0,0,179,56,1,0,0,0,180,181,
        5,60,0,0,181,58,1,0,0,0,182,183,5,62,0,0,183,184,5,61,0,0,184,60,
        1,0,0,0,185,186,5,60,0,0,186,187,5,61,0,0,187,62,1,0,0,0,188,192,
        7,2,0,0,189,191,7,3,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,
        1,0,0,0,192,193,1,0,0,0,193,64,1,0,0,0,194,192,1,0,0,0,195,197,5,
        45,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,7,
        4,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,
        0,0,0,202,66,1,0,0,0,203,204,3,65,32,0,204,206,5,46,0,0,205,207,
        7,4,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,
        1,0,0,0,209,68,1,0,0,0,210,216,5,34,0,0,211,212,5,92,0,0,212,215,
        9,0,0,0,213,215,8,5,0,0,214,211,1,0,0,0,214,213,1,0,0,0,215,218,
        1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,
        1,0,0,0,219,220,5,34,0,0,220,70,1,0,0,0,221,223,7,6,0,0,222,221,
        1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,
        1,0,0,0,226,227,6,35,0,0,227,72,1,0,0,0,10,0,134,140,192,196,201,
        208,214,216,224,1,6,0,0
    ]

class LenguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    SIZE = 8
    IF = 9
    ELSE = 10
    POSITION = 11
    PROCNAME = 12
    ASSIGN = 13
    ADD = 14
    LB = 15
    RB = 16
    LP = 17
    RP = 18
    LS = 19
    RS = 20
    SUM = 21
    MIN = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQ = 26
    NEQ = 27
    GT = 28
    LT = 29
    GET = 30
    LET = 31
    VAR = 32
    NUM = 33
    FLOAT = 34
    STRING = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<i>'", "'<o>'", "'while'", "'tactic'", "','", "'{'", "'}'", 
            "'#'", "'if'", "'else'", "'::'", "'<-'", "'<<'", "'>>'", "'('", 
            "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
            "'/='", "'>'", "'<'", "'>='", "'<='" ]

    symbolicNames = [ "<INVALID>",
            "SIZE", "IF", "ELSE", "POSITION", "PROCNAME", "ASSIGN", "ADD", 
            "LB", "RB", "LP", "RP", "LS", "RS", "SUM", "MIN", "MUL", "DIV", 
            "MOD", "EQ", "NEQ", "GT", "LT", "GET", "LET", "VAR", "NUM", 
            "FLOAT", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "SIZE", "IF", "ELSE", "POSITION", "PROCNAME", "ASSIGN", 
                  "ADD", "LB", "RB", "LP", "RP", "LS", "RS", "SUM", "MIN", 
                  "MUL", "DIV", "MOD", "EQ", "NEQ", "GT", "LT", "GET", "LET", 
                  "VAR", "NUM", "FLOAT", "STRING", "WS" ]

    grammarFileName = "Lenguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


